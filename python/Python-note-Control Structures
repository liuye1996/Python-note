###Control Structures###

#Booleans
my_boolean = True
print(my_boolean)
print(2 == 3)
print("hello" == "hello")

#Comparison
#the not equal operator (!=)
print(1 != 1)

# < and >, <= and >=
print( 7 > 5 )
print( 7 < 5.0 )
print( 7 >= 5 )
print( 7 <= 7 )

#### dont forget ":" behind if and else ! ####
#if Statements
if 10 > 5:
   print("10 greater than 5")
print("Program ended")

#if statements can be nested
num = 12
if num > 5:
   print("Bigger than 5")
   if num <=47:
      print("Between 5 and 47")
      
#else Statements
x = 4
if x == 5:
   print("Yes")
else:
   print("No")
   
#while Loops
i = 1
while i <=5:
   print(i)
   i = i + 1
   
print("Finished!")

#break
i = 0
while 1==1:
  print(i)
  i = i + 1
  if i >= 5:
    print("Breaking")
    break

print("Finished")

#continue
i = 0
while True:
   i = i +1
   if i == 2:
      print("Skipping 2")
      continue
   if i == 5:
      print("Breaking")
      break
   print(i)

print("Finished")

#Lists
words = ["Hello", "world", "!"]
print(words[0])
print(words[1])
print(words[2])

#Typically, a list will contain items of a single item type, but it is also possible to include several different types. 
#Lists can also be nested within other lists.
number = 3
things = ["string", 0, [1, 2, number], 4.56]
print(things[1])
print(things[2])
print(things[2][2])

#list string
str = "Hello world!"
print(str[6])

#List Operations
nums = [7, 7, 7, 7, 7]
nums[2] = 5
print(nums)

# in
#To check if an item is in a list, the in operator can be used. It returns True if the item occurs one or more times in the list, and False if it doesn't.
#The in operator is also used to determine whether or not a string is a substring of another string.
words = ["spam", "egg", "spam", "sausage"]
print("spam" in words)
print("egg" in words)
print("tomato" in words)

# not
#To check if an item is not in a list, you can use the not operator in one of the following ways:
nums = [1, 2, 3]
print(not 4 in nums)
print(4 not in nums)
print(not 3 in nums)
print(3 not in nums)

#append
#Another way of altering lists is using the append method. This adds an item to the end of an existing list.
nums = [1, 2, 3]
nums.append(4)
print(nums)

# len
#To get the number of items in a list, you can use the len function.
nums = [1, 3, 5, 2, 4]
print(len(nums))

# insert
#The insert method is similar to append, except that it allows you to insert a new item at any position in the list, as opposed to just at the end.
words = ["Python", "fun"]
index = 1
words.insert(index, "is")
print(words)

# index 
#The index method finds the first occurrence of a list item and returns its index.
#If the item isn't in the list, it raises a ValueError.
letters = ['p', 'q', 'r', 's', 'p', 'u']
print(letters.index('r'))
print(letters.index('p'))
# print(letters.index('z'))  #ValueError: 'z' is not in list

# There are a few more useful functions and methods for lists. 
# max(list): Returns the list item with the maximum value
# min(list): Returns the list item with minimum value
# list.count(obj): Returns a count of how many times an item occurs in a list
# list.remove(obj): Removes an object from a list
# list.reverse(): Reverses objects in a list

# Range
#The range function creates a sequential list of numbers.
#The code below generates a list containing all of the integers, up to 10.
numbers = list(range(10))
print(numbers)

#two argument
numbers = list(range(3, 8))
print(numbers)
print(range(20) == range(0, 20))

#the third argument
#range can have a third argument, which determines the interval of the sequence produced. This third argument must be an integer.
numbers = list(range(5, 20, 2))
print(numbers)

#Sometimes, you need to perform code on each item in a list. This is called iteration, and it can be accomplished with a while loop and a counter variable.
words = ["hello", "world", "spam", "eggs"]
counter = 0
max_index = len(words) - 1

while counter <= max_index:
   word = words[counter]
   print(word + "!")
   counter = counter + 1 

##### for loop #####
#Iterating through a list using a while loop requires quite a lot of code, so Python provides the for loop as a shortcut that accomplishes the same thing.
#The same code from the previous example can be written with a for loop, as follows:
words = ["hello", "world", "spam", "eggs"]
for word in words:
  print(word + "!")
  
#The for loop is commonly used to repeat some code a certain number of times. This is done by combining for loops with range objects.
for i in range(5):
    print("hello!")

