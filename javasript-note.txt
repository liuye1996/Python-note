
https://www.imooc.com/learn/36
https://www.imooc.com/learn/10


<!--引入外部文件的方式-->
<script src="script.js"></script>

-----------------------------------------------------------------------------

如何定义一个函数呢？基本语法如下:
function 函数名()
{
     函数代码;
}

---------------------------------------------------------------------------------------------

JavaScript-输出内容（document.write）
document.write() 可用于直接向 HTML 输出流写内容。简单的说就是直接在网页中输出内容。

----------------------------------------------------------------------------------------------

JavaScript-警告（alert 消息对话框）
我们在访问网站的时候，有时会突然弹出一个小窗口，上面写着一段提示信息文字。如果你不点击“确定”，就不能对网页做任何操作，这个小窗口就是使用alert实现的。

语法:
alert(字符串或变量);  

---------------------------------------------------------------------------------------------

JavaScript-确认（confirm 消息对话框）
confirm 消息对话框通常用于允许用户做选择的动作，如：“你对吗？”等。弹出对话框(包括一个确定按钮和一个取消按钮)。

语法:
confirm(str);

参数说明：
str：在消息对话框中要显示的文本
返回值: Boolean值

返回值:
当用户点击"确定"按钮时，返回true
当用户点击"取消"按钮时，返回false

注: 通过返回值可以判断用户点击了什么按钮

-----------------------------------------------------------------------------------------

JavaScript-提问（prompt 消息对话框）
prompt弹出消息对话框,通常用于询问一些需要与用户交互的信息。弹出消息对话框（包含一个确定按钮、取消按钮与一个文本输入框）。

语法:
prompt(str1, str2);

参数说明：
str1: 要显示在消息对话框中的文本，不可修改
str2：文本框中的内容，可以修改

返回值:
1. 点击确定按钮，文本框中的内容将作为函数返回值
2. 点击取消按钮，将返回null

---------------------------------------------------------------------------------------

JavaScript-打开新窗口（window.open）
open() 方法可以查找一个已经存在或者新建的浏览器窗口。

语法：

window.open([URL], [窗口名称], [参数字符串])

参数说明:

URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。
窗口名称：可选参数，被打开窗口的名称。
    1.该名称由字母、数字和下划线字符组成。
    2."_top"、"_blank"、"_self"具有特殊意义的名称。
       _blank：在新窗口显示目标网页
       _self：在当前窗口显示目标网页
       _top：框架网页中在上部窗口中显示目标网页
    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。
   4.name 不能包含有空格。

参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。

参数		值		说明
top		Number		窗口顶部离开屏幕顶部的像素
left		Number		窗口顶部离开屏幕左端的像素
width		Number		窗口的宽度
height		Number		窗口的高度
menubar		yes,no		窗口有没有菜单
toolbar		yes,no		窗口有没有工具条
scrollbars	yes,no		窗口有没有滚动条
status		yes,no		窗口有没有状态栏

-------------------------------------------------------------------------------------------

JavaScript-关闭窗口（window.close）
close()关闭窗口

用法：

window.close();   //关闭本窗口
或

<窗口对象>.close();   //关闭指定的窗口
例如:关闭新建的窗口。

<script type="text/javascript">
   var mywin=window.open('http://www.imooc.com'); //将新打的窗口对象，存储在变量mywin中
   mywin.close();
</script>
注意:上面代码在打开新窗口的同时，关闭该窗口，看不到被打开的窗口。

---------------------------------------------------------------------------------------------

编程练习
制作新按钮，“新窗口打开网站” ，点击打开新窗口。

任务
1、新窗口打开时弹出确认框，是否打开

提示: 使用 if 判断确认框是否点击了确定，如点击弹出输入对话框，否则没有任何操作。
2、通过输入对话框，确定打开的网址，默认为 http：//www.imooc.com/

3、打开的窗口要求，宽400像素，高500像素，无菜单栏、无工具栏。

<!DOCTYPE html>
<html>
 <head>
  <title> new document </title>  
  <meta http-equiv="Content-Type" content="text/html; charset=gbk"/>   
  <script type="text/javascript">  
  function openWindow(){
    var mywin=confirm("是否打开网页");
    if(mywin)
    {
        window.open('http://www.imooc.com/','_blank','width=400,height=500,menubar=no,toolbar=no');
    }
    // 新窗口打开时弹出确认框，是否打开
    // 通过输入对话框，确定打开的网址，默认为 http：//www.imooc.com/
    //打开的窗口要求，宽400像素，高500像素，无菜单栏、无工具栏。
    else
    { }
  }
  </script> 
 </head> 
 <body> 
	  <input type="button" value="新窗口打开网站" onclick="openWindow()" /> 
 </body>
</html>

------------------------------------------------------------------------------------

通过ID获取元素
学过HTML/CSS样式，都知道，网页由标签将信息组织起来，而标签的id属性值是唯一的，就像是每人有一个身份证号一样，只要通过身份证号就可以找到相对应的人。那么在网页中，我们通过id先找到标签，然后进行操作。

语法:

 document.getElementById(“id”) 

 ----------------------------------------------------------------------------------

innerHTML 属性
innerHTML 属性用于获取或替换 HTML 元素的内容。

语法:

Object.innerHTML
注意:

1.Object是获取的元素对象，如通过document.getElementById("ID")获取的元素。

2.注意书写，innerHTML区分大小写。

mychar.innerHTML = "Hello World!";

----------------------------------------------------------------------------------

改变 HTML 样式
HTML DOM 允许 JavaScript 改变 HTML 元素的样式。如何改变 HTML 元素的样式呢？

语法:

Object.style.property=new style;
注意:Object是获取的元素对象，如通过document.getElementById("id")获取的元素。

看看下面的代码:

改变 <p> 元素的样式，将颜色改为红色，字号改为20,背景颜色改为蓝：

<p id="pcon">Hello World!</p>
<script>
   var mychar = document.getElementById("pcon");
   mychar.style.color="red";
   mychar.style.fontSize="20";
   mychar.style.backgroundColor ="blue";
</script>

-------------------------------------------------------------------------------

显示和隐藏（display属性）
网页中经常会看到显示和隐藏的效果，可通过display属性来设置。

语法：

Object.style.display = value
注意:Object是获取的元素对象，如通过document.getElementById("id")获取的元素。

value取值:

none	此元素不会被显示（影藏）
block	子元素将显示为块级元素（显示）

--------------------------------------------------------------------------------

控制类名（className 属性）
className 属性设置或返回元素的class 属性。

语法：

object.className = classname
作用:

1.获取元素的class 属性

2. 为网页内的某个元素指定一个css样式来更改该元素的外观

-------------------------------------------------------------------------------

取消style设置  mychar.removeAttribute("style");

-------------------------------------------------------------------------------

编程挑战
小伙伴们，请编写"改变颜色"、"改变宽高"、"隐藏内容"、"显示内容"、"取消设置"的函数，点击相应按钮执行相应操作，点击"取消设置"按钮后，提示是否取消设置，如是执行操作，否则不做操作。

任务
一、定义"改变颜色"的函数

提示:
obj.style.color
obj.style.backgroundColor 
二、定义"改变宽高"的函数

提示:
obj.style.width
obj.style.height 
三、定义"隐藏内容"的函数

提示:
obj.style.display="none";
四、定义"显示内容"的函数

提示:
obj.style.display="block";
五、定义"取消设置"的函数

提示: 
使用confirm()确定框，来确认是否取消设置。
如是将以上所有的设置恢复原始值,否则不做操作。
六、当点击相应按钮，执行相应操作，为按钮添加相应事件

<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" Content="text/html; charset=utf-8" />
<title>javascript</title>
<style type="text/css">
body{font-size:12px;}
#txt{
    height:400px;
    width:600px;
	border:#333 solid 1px;
	padding:5px;}
p{
	line-height:18px;
	text-indent:2em;}
</style>
</head>
<body>
  <h2 id="con">JavaScript课程</H2>
  <div id="txt"> 
     <h5>JavaScript为网页添加动态效果并实现与用户交互的功能。</h5>
        <p>1. JavaScript入门篇，让不懂JS的你，快速了解JS。</p>
        <p>2. JavaScript进阶篇，让你掌握JS的基础语法、函数、数组、事件、内置对象、BOM浏览器、DOM操作。</p>
        <p>3. 学完以上两门基础课后，在深入学习JavaScript的变量作用域、事件、对象、运动、cookie、正则表达式、ajax等课程。</p>
  </div>
  <form>
  <!--当点击相应按钮，执行相应操作，为按钮添加相应事件-->
    <input type="button" value="改变颜色" onClick="changeColor()">  
    <input type="button" value="改变宽高" onClick="changeWid()">
    <input type="button" value="隐藏内容" onClick="display1()">
    <input type="button" value="显示内容" onClick="display2()">
    <input type="button" value="取消设置" onClick="canel()">
  </form>
  <script type="text/javascript">
    var mychar = document.getElementById("txt");
//定义"改变颜色"的函数
    function changeColor(){
        mychar.style.backgroundColor = "#CCC";
        mychar.style.color = "red";
    }
//定义"改变宽高"的函数
    function changeWid(){
        mychar.style.width = "300px"
        mychar.style.width = "400px"
    }
//定义"隐藏内容"的函数
    function display1(){
        mychar.style.display = "none";
    }
//定义"显示内容"的函数
    function display2(){
        mychar.style.display = "block";
    }
//定义"取消设置"的函数
    function canel(){
        var bo = window.confirm("是否恢复");
        if(bo){
            mychar.removeAttribute("style");
        }
        else{}
    }
  </script>
</body>
</html>

-------------------------------------------------------------------------

组团，并给团取个名（如何创建数组）
使用数组之前首先要创建，而且需要把数组本身赋至一个变量。

创建数组语法：

var myarray=new Array();

我们创建数组的同时，还可以为数组指定长度，长度可任意指定。

var myarray= new Array(8); //创建数组，存储8个数据。 
注意：
1.创建的新数组是空数组，没有值，如输出，则显示undefined。
2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外。

------------------------------------------------------------------------

了解成员数量(数组属性length)
如果我们想知道数组的大小，只需引用数组的一个属性length。Length属性表示数组的长度，即数组中元素的个数。

语法：

myarray.length; //获得数组myarray的长度
注意：因为数组的索引总是由0开始，所以一个数组的上下限分别是：0和length-1。如数组的长度是5，数组的上下限分别是0和4。

var arr=[55,32,5,90,60,98,76,54];//包含8个数值的数组arr 
document.write(arr.length); //显示数组长度8
document.write(arr[7]); //显示第8个元素的值54
同时，JavaScript数组的length属性是可变的，这一点需要特别注意。

arr.length=10; //增大数组的长度
document.write(arr.length); //数组长度已经变为10
数组随元素的增加，长度也会改变，如下:

var arr=[98,76,54,56,76]; // 包含5个数值的数组
document.write(arr.length); //显示数组的长度5
arr[15]=34;  //增加元素，使用索引为15,赋值为34
alert(arr.length); //显示数组的长度16

-----------------------------------------------------------------

二维数组
一维数组，我们看成一组盒子，每个盒子只能放一个内容。

一维数组的表示: myarray[ ]
二维数组，我们看成一组盒子，不过每个盒子里还可以放多个盒子。

二维数组的表示: myarray[ ][ ]
注意: 二维数组的两个维度的索引值也是从0开始，两个维度的最后一个索引值为长度-1。 

1. 二维数组的定义方法一

var myarr=new Array();  //先声明一维 
for(var i=0;i<2;i++){   //一维长度为2
   myarr[i]=new Array();  //再声明二维 
   for(var j=0;j<3;j++){   //二维长度为3
   myarr[i][j]=i+j;   // 赋值，每个数组元素的值为i+j
   }
 }

 2. 二维数组的定义方法二

var Myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]

3. 赋值

myarr[0][1]=5; //将5的值传入到数组中，覆盖原有值。

说明: myarr[0][1] ,0 表示表的行，1表示表的列。

-----------------------------------------------------------------------

编程练习
使用Javascript语言，把以下数组

   var  arr = ['*','##',"***","&&","****","##*"];

   arr[7] = "**";

在页面显示如下图所示的图案：

*

**

***

**** 

任务
第一步：定义一个数组，存储要展示的图形。

提示:
   var  arr = ['*','##',"***","&&","****","##*"];
   arr[7] = "**";
第二步：预想一下arr 数组的长度是多少？     

提示: 使用alert弹出数组的长度，看看是否跟自己的答案一样。
第三步：将数组内容输出，完成达到的效果。

 提示: 想在不同行显示不同数组内容，别忘记<br/>换行标签。

<!DOCTYPE  HTML>
<html >
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>数组</title>
<script type="text/javascript">
 //创建数组
    var  arr = ['*','##',"***","&&","****","##*"];
    arr[7] = "**";
 //显示数组长度
    alert(arr.length);
 
 //将数组内容输出，完成达到的效果。
    document.write(arr[0]+"<br><br>");
    document.write(arr[7]+"<br><br>");
    document.write(arr[2]+"<br><br>");
    document.write(arr[4]+"<br><br>");

</script>
</head>
<body>
</body>
</html>

---------------------------------------------------------

编程练习
在一个大学的编程选修课班里，我们得到了一组参加该班级的学生数据，分别是姓名、性别、年龄和年级，接下来呢，我们要利用JavaScript的知识挑出其中所有是大一的女生的的名字哦。

学生信息如下：

    ('小A','女',21,'大一'),  ('小B','男',23,'大三'),

    ('小C','男',24,'大四'),  ('小D','女',21,'大一'),

    ('小E','女',22,'大四'),  ('小F','男',21,'大一'),

    ('小G','女',22,'大二'),  ('小H','女',20,'大三'),

    ('小I','女',20,'大一'),  ('小J','男',20,'大三')

任务
第一步： 把这些数据组成一个数组，方便我们之后操作哦。

提示: 使用二维数组。
第二步： 筛选数据吧，首先找出都是大一的所有信息 ;

第三步： 最后再一次筛选上一步得到的数据，打印出都是女生的姓名 ;

提示: 可以用switch 或 if 语句进行筛选。

<!DOCTYPE  HTML>
<html >
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>流程控制语句</title>
<script type="text/javascript">

 //第一步把之前的数据写成一个数组的形式,定义变量为 infos
 var infos = [['小A','女',21,'大一'],['小B','男',23,'大三'],
            ['小C','男',24,'大四'],['小D','女',21,'大一'],
            ['小E','女',22,'大四'],['小F','男',21,'大一'],
            ['小G','女',22,'大二'],['小H','女',20,'大三'],
            ['小I','女',20,'大一'],['小J','男',20,'大三']];
 
 //第一次筛选，找出都是大一的信息
 
 for(var j = 0;j<10;j++){
    if(infos[j][3]=='大一'){
        for(var i = 0 ;i<4;i++){
            document.write(infos[j][i]);
            if(i==3) document.write("<br>");
        } 
    }
 }
 document.write("<br>");
 //第二次筛选，找出都是女生的信息
 
 for(var j = 0;j<10;j++){
    if(infos[j][3]=='大一'&&infos[j][1]=='女'){
        for(var i = 0 ;i<4;i++){
            document.write(infos[j][i]);
            if(i==3) document.write("<br>");
        } 
    }
 }
  
</script>
</head>
<body>
</body>
</html>

----------------------------------------------------------------------

编程练习
使用javascript代码写出一个函数：实现传入两个整数后弹出较大的整数。

任务
第一步： 编写代码完成一个函数的定义吧。

第二步： 我们来补充函数体中的控制语句，完成函数功能吧。

提示:再想一想，两个整数比较有三种情况，大于，等于或小于，所以我们需要控制语句判断(if...else if)。
第三步：  写好的函数，我们就可以任意调用函数了。通过函数调用实现两组数值中，返回较大值吧。

<!DOCTYPE  HTML>
<html >
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>函数</title>

<script type="text/javascript">

//定义函数
 
//函数体，判断两个整数比较的三种情况
  function cop(x,y){
    if(x>y){ return x;}
    else if(x==y){ return 'x==y';}
    else {return y;}
  }
 
//调用函数，实现下面两组数中，返回较大值。
  document.write(" 5 和 4 的较大值是:"+cop(5,4)+"<br>");
  document.write(" 6 和 3 的较大值是:"+cop(6,3)); 

</script>
</head>
<body>
</body>
</html>

--------------------------------------------------------------------

什么是事件
JavaScript 创建动态页面。事件是可以被 JavaScript 侦测到的行为。 网页中的每个元素都可以产生某些可以触发 JavaScript 函数或程序的事件。

比如说，当用户单击按钮或者提交表单数据时，就发生一个鼠标单击（onclick）事件，需要浏览器做出处理，返回给用户一个结果。

主要事件表:

事件		说明
onclick		鼠标单击事件
onmouseover	鼠标经过事件
onmouseout	鼠标移开事件
onchange	文本框内容改变事件
onselect	文本框内容被选中事件
onfocus		光标聚集
onblur		光标离开
onload		网页导入
onunload	关闭网页

----------------------------------------------------------------------

鼠标单击事件( onclick ）
onclick是鼠标单击事件，当在网页上单击鼠标时，就会发生该事件。同时onclick事件调用的程序块就会被执行，通常与按钮一起使用。

比如，我们单击按钮时，触发 onclick 事件，并调用两个数和的函数add2()。代码如下：

<html>
<head>
   <script type="text/javascript">
      function add2(){
        var numa,numb,sum;
        numa=6;
        numb=8;
        sum=numa+numb;
        document.write("两数和为:"+sum);  }
   </script>
</head>
<body>
   <form>
      <input name="button" type="button" value="点击提交" onclick="add2()" />
   </form>
</body>
</html>
注意: 在网页中，如使用事件，就在该元素中设置事件属性。 

-------------------------------------------------------------------------------

鼠标经过事件（onmouseover）
鼠标经过事件，当鼠标移到一个对象上时，该对象就触发onmouseover事件，并执行onmouseover事件调用的程序。

鼠标移开事件（onmouseout）
鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序。

光标聚焦事件（onfocus）
当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行。

失焦事件（onblur）
onblur事件与onfocus是相对事件，当光标离开当前获得聚焦对象的时候，触发onblur事件，同时执行被调用的程序。

内容选中事件（onselect）
选中事件，当文本框或者文本域中的文字被选中时，触发onselect事件，同时调用的程序就会被执行。

文本框内容改变事件（onchange）
通过改变文本框的内容来触发onchange事件，同时执行被调用的程序。

加载事件（onload）
事件会在页面加载完成后，立即发生，同时执行被调用的程序。
注意：1. 加载页面时，触发onload事件，事件写在<body>标签内。
      2. 此节的加载页面，可理解为打开一个新页面时。

卸载事件（onunload）
当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件，同时执行被调用的程序。

注意：不同浏览器对onunload事件支持不同。

------------------------------------------------------------------------------

编程练习
使用JS完成一个简单的计算器功能。实现2个输入框中输入整数后，点击第三个输入框能给出2个整数的加减乘除。

提示：获取元素的值设置和获取方法为：例：赋值：document.getElementById(“id”）.value = 1； 取值：var = document.getElementById(“id”）.value；

任务
第一步： 创建构建运算函数count()。

第二步： 获取两个输入框中的值和获取选择框的值。

提示：document.getElementById( id名 ).value 获取或设置 id名的值。
第三步： 获取通过下拉框来选择的值来改变加减乘除的运算法则。

提示：使用switch判断运算法则。
第四步：  通过 = 按钮来调用创建的函数，得到结果。

注意: 使用parseInt()函数可解析一个字符串,并返回一个整数。

<!DOCTYPE html>
<html>
 <head>
  <title> 事件</title>  
  <script type="text/javascript">
   function count(){
       
    //获取第一个输入框的值
    var num1 = document.getElementById("txt1").value;
	//获取第二个输入框的值
	var num2 = document.getElementById("txt2").value;
	//获取选择框的值
	var se = document.getElementById("select").value;
	//获取通过下拉框来选择的值来改变加减乘除的运算法则
	var result = 0;
	switch(se){
	    case '+':result = parseInt(num1)+parseInt(num2);break;
	    case '-':result = num1-num2;break;
	    case '*':result = num1*num2;break;
	    case '/':result = num1/num2;break;
	}
    //设置结果输入框的值 
    document.getElementById("fruit").value=result;
   }
  </script> 
 </head> 
 <body>
   <input type='text' id='txt1' /> 
   <select id='select'>
		<option value='+'>+</option>
		<option value="-">-</option>
		<option value="*">*</option>
		<option value="/">/</option>
   </select>
   <input type='text' id='txt2' /> 
   <input type='button' value=' = ' onclick="count()"/> <!--通过 = 按钮来调用创建的函数，得到结果--> 
   <input type='text' id='fruit' />   
 </body>
</html>

------------------------------------------------------------------

什么是对象
JavaScript 中的所有事物都是对象，如:字符串、数值、数组、函数等，每个对象带有属性和方法。

对象的属性：反映该对象某些特定的性质的，如：字符串的长度、图像的长宽等；

对象的方法：能够在对象上执行的动作。例如，表单的“提交”(Submit)，时间的“获取”(getYear)等；

JavaScript 提供多个内建对象，比如 String、Date、Array 等等，使用对象前先定义，如下使用数组对象：

  var objectName =new Array();//使用new关键字定义对象
或者
  var objectName =[];
访问对象属性的语法:

objectName.propertyName
如使用 Array 对象的 length 属性来获得数组的长度：

var myarray=new Array(6);//定义数组对象
var myl=myarray.length;//访问数组长度length属性
以上代码执行后，myl的值将是：6

访问对象的方法：

objectName.methodName()
如使用string 对象的 toUpperCase() 方法来将文本转换为大写：

var mystr="Hello world!";//创建一个字符串
var request=mystr.toUpperCase(); //使用字符串对象方法
以上代码执行后，request的值是：HELLO WORLD!

---------------------------------------------------------------------

Date 日期对象
日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。

定义一个时间对象 :

var Udate=new Date(); 
注意:使用关键字new，Date()的首字母必须大写。 

使 Udate 成为日期对象，并且已有初始值：当前时间(当前电脑系统时间)。

如果要自定义初始值，可以用以下方法：

var d = new Date(2012, 10, 1);  //2012年10月1日
var d = new Date('Oct 1, 2012'); //2012年10月1日
我们最好使用下面介绍的“方法”来严格定义时间。

访问方法语法：“<日期对象>.<方法>”

Date对象中处理时间和日期的常用方法：
方法名称		功能描述
get/setDate()		返回/设置日期
get/setFullYear()	返回/设置年份，用四位数表示
get/setYear()		返回/设置年份
get/setMonth()		返回/设置月份  //0：一月...11：十二月   +1
get/setHours()		返回/设置小时，24小时制
get/setMinutes()	返回/设置分钟数
get/setSeconds()	返回/设置秒钟树
get/setTime()		返回/设置时间（毫秒为单位）
-----------------------------------------------------------
返回/设置年份方法
get/setFullYear() 返回/设置年份，用四位数表示。

var mydate=new Date();//当前时间2014年3月6日
document.write(mydate+"<br>");//输出当前时间
document.write(mydate.getFullYear()+"<br>");//输出当前年份
mydate.setFullYear(81); //设置年份
document.write(mydate+"<br>"); //输出年份被设定为 0081年。
注意:不同浏览器， mydate.setFullYear(81)结果不同，年份被设定为 0081或81两种情况。

结果:

Thu Mar 06 2014 10:57:47 GMT+0800
2014
Thu Mar 06 0081 10:57:47 GMT+0800
注意:

1.结果格式依次为：星期、月、日、年、时、分、秒、时区。(火狐浏览器)

2. 不同浏览器，时间格式有差异。
------------------------------------------------------
返回星期方法
getDay() 返回星期，返回的是0-6的数字，0 表示星期天。如果要返回相对应“星期”，通过数组完成，代码如下:

<script type="text/javascript">
  var mydate=new Date();//定义日期对象
  var weekday=["星期日","星期一","星期二","星期三","星期四","星期五","星期六"];
//定义数组对象,给每个数组项赋值
  var mynum=mydate.getDay();//返回值存储在变量mynum中
  document.write(mydate.getDay());//输出getDay()获取值
  document.write("今天是："+ weekday[mynum]);//输出星期几
</script>
注意：以上代码是在2014年3月7日，星期五运行。
-------------------------------------------------------
返回/设置时间方法
get/setTime() 返回/设置时间，单位毫秒数，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。

如果将目前日期对象的时间推迟1小时，代码如下:

<script type="text/javascript">
  var mydate=new Date();
  document.write("当前时间："+mydate+"<br>");
  mydate.setTime(mydate.getTime() + 60 * 60 * 1000);
  document.write("推迟一小时时间：" + mydate);
</script>
结果:

当前时间：Thu Mar 6 11:46:27 UTC+0800 2014

推迟一小时时间：Thu Mar 6 12:46:27 UTC+0800 2014

注意:1. 一小时 60 分，一分 60 秒，一秒 1000 毫秒

      2. 时间推迟 1 小时,就是: “x.setTime(x.getTime() + 60 * 60 * 1000);”

--------------------------------------------------------------------------------

String 字符串对象
在之前的学习中已经使用字符串对象了，定义字符串的方法就是直接赋值。比如：

var mystr = "I love JavaScript!"
定义mystr字符串后，我们就可以访问它的属性和方法。

访问字符串对象的属性length:

stringObject.length; 返回该字符串的长度。

var mystr="Hello World!";
var myl=mystr.length;
以上代码执行后，myl 的值将是：12

访问字符串对象的方法：

使用 String 对象的 toUpperCase() 方法来将字符串小写字母转换为大写：

var mystr="Hello world!";
var mynum=mystr.toUpperCase();
以上代码执行后，mynum 的值是：HELLO WORLD!
--------------------------------------------------
返回指定位置的字符
charAt() 方法可返回指定位置的字符。返回的字符是长度为 1 的字符串。

语法:

stringObject.charAt(index)

index	必需。表示字符串中某个位置的数字，即字符在字符串中的下标

注意：1.字符串中第一个字符的下标是 0。最后一个字符的下标为字符串长度减一（string.length-1）。

2.如果参数 index 不在 0 与 string.length-1 之间，该方法将返回一个空字符串。

如:在字符串 "I love JavaScript!" 中，返回位置2的字符：

<script type="text/javascript">
  var mystr="I love JavaScript!"
  document.write(mystr.charAt(2));
</script>
注意：一个空格也算一个字符。
-----------------------------------------------
返回指定的字符串首次出现的位置
indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。

语法

stringObject.indexOf(substring, startpos)

substring	必需。规定需检索的字符串侄
startpos	可选的整数参数。规定在字符串中开始检索的位置。他的合法取值是0到length-1，如省略，将从首字符开始检索。

说明：

1.该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 substring。

2.可选参数，从stringObject的startpos位置开始查找substring，如果没有此参数将从stringObject的开始位置查找。

3.如果找到一个 substring，则返回 substring 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。

注意：1.indexOf() 方法区分大小写。

2.如果要检索的字符串值没有出现，则该方法返回 -1。

例如: 对 "I love JavaScript!" 字符串内进行不同的检索：

<script type="text/javascript">
  var str="I love JavaScript!"
  document.write(str.indexOf("I") + "<br />");
  document.write(str.indexOf("v") + "<br />");
  document.write(str.indexOf("v",8));
</script>
以上代码的输出：

0
4
9
----------------------------------------------
字符串分割split()
知识讲解：

split() 方法将字符串分割为字符串数组，并返回此数组。

语法：
stringObject.split(separator,limit)

seperator	必需。从该参数指定的地方分割 stringObject。
limit		可选参数，分割的次数，如设置该参数，返回的子串不会多于这个参数指定的数组，如果无此参数为不限制次数

注意：如果把空字符串 ("") 用作 separator，那么 stringObject 中的每个字符之间都会被分割。

我们将按照不同的方式来分割字符串：

使用指定符号分割字符串，代码如下:

var mystr = "www.imooc.com";
document.write(mystr.split(".")+"<br>");
document.write(mystr.split(".", 2)+"<br>");
运行结果:

www,imooc,com
www,imooc
将字符串分割为字符，代码如下：

document.write(mystr.split("")+"<br>");
document.write(mystr.split("", 5));
运行结果:

w,w,w,.,i,m,o,o,c,.,c,o,m
w,w,w,.,i
-------------------------------------------
提取字符串substring()
substring() 方法用于提取字符串中介于两个指定下标之间的字符。

语法:

stringObject.substring(startPos,stopPos) 

startPos	必需.一个非负的整数，开始位置。
stopPos		可选。一个非负整数，结束位置，如果省略到结尾

注意：

1. 返回的内容是从 start开始(包含start位置的字符)到 stop-1 处的所有字符，其长度为 stop 减start。

2. 如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。

3. 如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。

使用 substring() 从字符串中提取字符串，代码如下：

<script type="text/javascript">
  var mystr="I love JavaScript";
  document.write(mystr.substring(7));
  document.write(mystr.substring(2,6));
</script>
运行结果:

JavaScript
love
--------------------------------------------------
提取指定数目的字符substr()
substr() 方法从字符串中提取从 startPos位置开始的指定数目的字符串。

语法:

stringObject.substr(startPos,length)

startPos	必需.开始位置。
length		可选。提取字符串的长度。如果省略，到结尾

注意：如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。

如果startPos为负数且绝对值大于字符串长度，startPos为0。

使用 substr() 从字符串中提取一些字符，代码如下：

<script type="text/javascript">
  var mystr="I love JavaScript!";
  document.write(mystr.substr(7));
  document.write(mystr.substr(2,4));
</script>
运行结果：

JavaScript!
love

-------------------------------------------------------------------------

Math对象
Math对象，提供对数据的数学计算。

使用 Math 的属性和方法，代码如下：

<script type="text/javascript">
  var mypi=Math.PI; 
  var myabs=Math.abs(-15);
  document.write(mypi);
  document.write(myabs);
</script>
运行结果:

3.141592653589793
15
注意：Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。

Math 对象属性

属性		说明
E		返回算术常量e，即自然对数的底数（约等于2.718）。
LN2		返回 2 的自然对数（约等于0.693）
LN10		返回 10 的自然对数（约等于2.302）
LOG2E		返回以 2 为底的e的对数（约等于1.442）
LOG10E		返回以 10 为底的e的对数（约等于0.434）
PI		返回圆周率（约等于3.14159）
SQRT1_2		返回2的平方根的倒数（约等于0.707）
SQRT2		返回2的平方根（约等于1.414）

Math 对象方法

方法		描述
abs(x)		返回数的绝对值
ceil(x)		对数进行上舍入
floor(x)	对数进行下舍入
pow(x)		返回 x 的 y 次幂
random(x)	返回1-2之间的随机数
round(x)	把数四舍五入为最接近的整数
toSource()	返回该对象的源代码
valueOf()	返回Math对象的原始值
--------------------------------------------

向上取整ceil()
ceil() 方法可对一个数进行向上取整。

语法:

Math.ceil(x)

x	必需。必须是一个数值。

注意：它返回的是大于或等于x，并且与x最接近的整数。

我们将把 ceil() 方法运用到不同的数字上，代码如下：

<script type="text/javascript">
  document.write(Math.ceil(0.8) + "<br />")
  document.write(Math.ceil(6.3) + "<br />")
  document.write(Math.ceil(5) + "<br />")
  document.write(Math.ceil(3.5) + "<br />")
  document.write(Math.ceil(-5.1) + "<br />")
  document.write(Math.ceil(-5.9))
</script>
运行结果：

1
7
5
4
-5
-5
---------------------------------------------------
向下取整floor()
floor() 方法可对一个数进行向下取整。

语法:

Math.floor(x)

注意：返回的是小于或等于x，并且与 x 最接近的整数。

我们将在不同的数字上使用 floor() 方法，代码如下:

<script type="text/javascript">
  document.write(Math.floor(0.8)+ "<br>")
  document.write(Math.floor(6.3)+ "<br>")
  document.write(Math.floor(5)+ "<br>")
  document.write(Math.floor(3.5)+ "<br>")
  document.write(Math.floor(-5.1)+ "<br>")
  document.write(Math.floor(-5.9))
</script>
运行结果：

0
6
5
3
-6
-6
---------------------------------------

四舍五入round()
round() 方法可把一个数字四舍五入为最接近的整数。

语法:

Math.round(x)

x	必需。必须是一个数字。

注意：

1. 返回与 x 最接近的整数。

2. 对于 0.5，该方法将进行上舍入。(5.5 将舍入为 6)

3. 如果 x 与两侧整数同等接近，则结果接近 +∞方向的数字值 。(如 -5.5 将舍入为 -5; -5.52 将舍入为 -6)

把不同的数舍入为最接近的整数,代码如下：

<script type="text/javascript">
  document.write(Math.round(1.6)+ "<br>");
  document.write(Math.round(2.5)+ "<br>");
  document.write(Math.round(0.49)+ "<br>");
  document.write(Math.round(-6.4)+ "<br>");
  document.write(Math.round(-6.6));
</script>
运行结果：

2
3
0
-6
-7
-------------------------------------------
随机数 random()
random() 方法可返回介于 0 ~ 1（大于或等于 0 但小于 1 )之间的一个随机数。
语法：

Math.random();
注意：返回一个大于或等于 0 但小于 1 的符号为正的数字值。

我们取得介于 0 到 1 之间的一个随机数，代码如下：

<script type="text/javascript">
  document.write(Math.random());
</script>
运行结果：

0.190305486195328  
注意:因为是随机数，所以每次运行结果不一样，但是0 ~ 1的数值。
获得0 ~ 10之间的随机数，代码如下:

<script type="text/javascript">
  document.write((Math.random())*10);
</script>
运行结果：

8.72153625893887
----------------------------------------------------------

Array 数组对象
数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的

数组定义的方法：

1. 定义了一个空数组:

var  数组名= new Array();
2. 定义时指定有n个空元素的数组：

var 数组名 =new Array(n);
3.定义数组的时候，直接初始化数据：

var  数组名 = [<元素1>, <元素2>, <元素3>...];
我们定义myArray数组，并赋值，代码如下：

var myArray = [2, 8, 6]; 
说明：定义了一个数组 myArray，里边的元素是：myArray[0] = 2; myArray[1] = 8; myArray[2] = 6。

数组元素使用：

数组名[下标] = 值;
注意: 数组的下标用方括号括起来，从0开始。

数组属性：

length 用法：<数组对象>.length；返回：数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。

数组方法：
方法				描述
concat()			连接两个或更多的数组，并返回结果
join()				把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔
pop()				删除并返回数组的最后一个元素
puch()				向数组的末尾添加一个或更多元素，并返回新的长度
reverse()			颠倒数组中元素的顺序
shift()				删除并返回数组的最后一个元素
slice()				从某个已有的数组返回选定的元素
sort()				对数组的元素进行排序
splice()			删除元素，并向数组中添加新元素
toSource()			返回该对象的源代码
toSrting()			转成字符串
toLocaleString()	转为本地数组
unshift()			向数组的开头添加一个或更多元素，并返回新的长度
valueOf()			返回数组对象的原始值
----------------------------------------
数组连接concat()
concat() 方法用于连接两个或多个数组。此方法返回一个新数组，不改变原来的数组。

语法

arrayObject.concat(array1,array2,...,arrayN)
参数说明：
myarr1		要连接的第一个数组
..
..
myarrN		第N个数组


注意:  该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。

我们创建一个数组，将把 concat() 中的参数连接到数组 myarr 中，代码如下：

<script type="text/javascript">
  var mya = new Array(3);
  mya[0] = "1";
  mya[1] = "2";
  mya[2] = "3";
  document.write(mya.concat(4,5)+"<br>");
  document.write(mya); 
</script>
运行结果：

1,2,3,4,5
1,2,3
我们创建了三个数组，然后使用 concat() 把它们连接起来，代码如下：

<script type="text/javascript">
  var mya1= new Array("hello!")
  var mya2= new Array("I","love");
  var mya3= new Array("JavaScript","!");
  var mya4=mya1.concat(mya2,mya3);
  document.write(mya4);
</script>
运行结果：

hello!,I,love,JavaScript,!
-------------------------------------------------------
指定分隔符连接数组元素join()
join()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。

语法：

arrayObject.join(分隔符)
参数说明:
separtor		可选。指定要使用的分隔符。如果省略，则使用逗号


注意：返回一个字符串，该字符串把数组中的各个元素串起来，用<分隔符>置于元素与元素之间。这个方法不影响数组原本的内容。 我们使用join（）方法，将数组的所有元素放入一个字符串中，代码如下：
<script type="text/javascript">
  var myarr = new Array(3);
  myarr[0] = "I";
  myarr[1] = "love";
  myarr[2] = "JavaScript";
  document.write(myarr.join());
</script>
运行结果：

I,love,JavaScript
我们将使用分隔符来分隔数组中的元素，代码如下：

<script type="text/javascript">
  var myarr = new Array(3)
  myarr[0] = "I";
  myarr[1] = "love";
  myarr[2] = "JavaScript";
  document.write(myarr.join("."));
</script>
运行结果：

I.love.JavaScript
-------------------------------------------------
颠倒数组元素顺序reverse()
reverse() 方法用于颠倒数组中元素的顺序。

语法：

arrayObject.reverse()
注意：该方法会改变原来的数组，而不会创建新的数组。

定义数组myarr并赋值，然后颠倒其元素的顺序：

<script type="text/javascript">
  var myarr = new Array(3)
  myarr[0] = "1"
  myarr[1] = "2"
  myarr[2] = "3"
  document.write(myarr + "<br />")
  document.write(myarr.reverse())
</script>
运行结果：

1,2,3
3,2,1
---------------------------------------------
选定元素slice()
slice() 方法可从已有的数组中返回选定的元素。

语法

arrayObject.slice(start,end)
参数说明：
start		必需。从何开始，如果负数。
end			可选。一个整数，结束位置是数组下标，如果省略到结尾

1.返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。

2. 该方法并不会修改数组，而是返回一个子数组。

注意：

1. 可使用负值从数组的尾部选取元素。

2.如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。

3. String.slice() 与 Array.slice() 相似。

我们将创建一个新数组，然后从其中选取的元素，代码如下：

<script type="text/javascript">
  var myarr = new Array(1,2,3,4,5,6);
  document.write(myarr + "<br>");
  document.write(myarr.slice(2,4) + "<br>");
  document.write(myarr);
</script>
运行结果：

1,2,3,4,5,6
3,4
1,2,3,4,5,6
-----------------------------------------
数组排序sort()
sort()方法使数组中的元素按照一定的顺序排列。

语法:

arrayObject.sort(方法函数)
参数说明：
方法函数	可选。规定排序顺序，必须是函数。


1.如果不指定<方法函数>，则按unicode码顺序排列。

2.如果指定<方法函数>，则按<方法函数>所指定的排序方法排序。

myArray.sort(sortMethod);
注意: 该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下： 

  若返回值<=-1，则表示 A 在排序后的序列中出现在 B 之前。
  若返回值>-1 && <1，则表示 A 和 B 具有相同的排序顺序。
  若返回值>=1，则表示 A 在排序后的序列中出现在 B 之后。

1.使用sort()将数组进行排序，代码如下：

<script type="text/javascript">
  var myarr1 = new Array("Hello","John","love","JavaScript"); 
  var myarr2 = new Array("80","16","50","6","100","1");
  document.write(myarr1.sort()+"<br>");
  document.write(myarr2.sort());
</script>
运行结果：

Hello,JavaScript,John,love
1,100,16,50,6,80
注意:上面的代码没有按照数值的大小对数字进行排序。

2.如要实现这一点，就必须使用一个排序函数，代码如下：

<script type="text/javascript">
  function sortNum(a,b) {
  return a - b;
 //升序，如降序，把“a - b”该成“b - a”
}
 var myarr = new Array("80","16","50","6","100","1");
  document.write(myarr + "<br>");
  document.write(myarr.sort(sortNum));
</script>
运行结果：

80,16,50,6,100,1
1,6,16,50,80,100
--------------------------------------------------------------

编程练习
某班的成绩出来了，现在老师要把班级的成绩打印出来。

效果图:

XXXX年XX月X日 星期X--班级总分为:81
格式要求：

1、显示打印的日期。 格式为类似“XXXX年XX月XX日 星期X” 的当前的时间。

2、计算出该班级的平均分（保留整数）。

同学成绩数据如下：

"小明:87; 小花:81; 小红:97; 小天:76;小张:74;小小:94;小西:90;小伍:76;小迪:64;小曼:76"

任务
第一步：可通过javascript的日期对象来得到当前的日期。

提示:使用Date()日期对象，注意星期返回值为0-6，所以要转成文字"星期X"
第二步：一长窜的字符串不好弄，找规律后分割放到数组里更好操作哦。

第三步：分割字符串得到分数，然后求和取整。

提示：parseInt() 字符串类型转成整型。

<!DOCTYPE  HTML>
<html >
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>系好安全带,准备启航</title>

<script type="text/javascript">

  //通过javascript的日期对象来得到当前的日期，并输出。
  var mydate = new Date();
  var weekday=["星期日","星期一","星期二","星期三","星期四","星期五","星期六"];
  document.write(mydate.getFullYear()+"年"+mydate.getMonth()+"月"+mydate.getDate()+"日  "+weekday[mydate.getDay()]);

  
  
  //成绩是一长窜的字符串不好处理，找规律后分割放到数组里更好操作哦
  var scoreStr = "小明:87;小花:81;小红:97;小天:76;小张:74;小小:94;小西:90;小伍:76;小迪:64;小曼:76";
  var score = new Array();
  var sum = 0;
  for(var i=0;i<10;i++){
    score[i]=scoreStr.substr((3+i*6),2);
    sum +=parseInt(score[i]);
    // document.write(score[i]);
  }
  document.write("--班级总分为:"+sum);
  
  


  //从数组中将成绩撮出来，然后求和取整，并输出。
  

</script>
</head>
<body>
</body>
</html>

-----------------------------------------------------------------------------

window对象
window对象是BOM的核心，window对象指当前的浏览器窗口。

window对象方法:
方法				描述
aler()				显示带有一段消息和一个确认按钮的警告框
prompt()			显示可提示用户输入的对话框
confirm()			显示带有一段消息和一个确认按钮和取消按钮的对话框
open()				打开一个新的浏览器窗口或查找一个已命名的窗口
close()				关闭浏览器窗口
print()				打印当前窗口内容
focus()				把键盘焦点给一个窗口
blur()				把键盘焦点从顶层窗口移开
moveBy()			可相对窗口的当前坐标把它移动指定的像素
moveTo()			把窗口的左上角移动到一个指定的坐标
resizeBy()			按照指定的像素调整窗口大小
resizeTo()			把窗口的大小调整到指定的宽度和高度
scrollBy()			按照指定的像素值来滚动内容
scrollTo()			把内容滚动到指定的坐标
setInterval()		每隔指定的时间执行代码
setTimeout()		在指定的延迟时间之后来执行代码
clearInterval()		取消 setInterval（）的设置
clearTimeout()		取消 setTime（）的设置

注意:在JavaScript基础篇中，已讲解了部分属性，window对象重点讲解计时器。

------------------------------------------------------------------------

JavaScript 计时器
在JavaScript中，我们可以在设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。
计时器类型：
一次性计时器：仅在指定的延迟时间之后触发一次。
间隔性触发计时器：每隔一定的时间间隔就触发一次。
计时器方法：

方法				说明
setTimeout()		指定的延迟时间之后来执行代码
clearTimeout()		取消 setTime（）的设置
setInterval()		每隔指定的时间执行代码
clearInterval()		取消 setInterval（）的设置
------------------------------------------------
计时器setInterval()
在执行时,从载入页面后每隔指定的时间执行代码。

语法:

setInterval(代码,交互时间);
参数说明：

1. 代码：要调用的函数或要执行的代码串。

2. 交互时间：周期性执行或调用表达式之间的时间间隔，以毫秒计（1s=1000ms）。

返回值:

一个可以传递给 clearInterval() 从而取消对"代码"的周期性执行的值。

调用函数格式(假设有一个clock()函数):

setInterval("clock()",1000)
或
setInterval(clock,1000)
我们设置一个计时器，每隔100毫秒调用clock()函数，并将时间显示出来，代码如下:

<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>计时器</title>
<script type="text/javascript">
  var int=setInterval(clock, 100)
  function clock(){
    var time=new Date();
    document.getElementById("clock").value = time;
  }
</script>
</head>
<body>
  <form>
    <input type="text" id="clock" size="50"  />
  </form>
</body>
</html>
------------------------------------------------------
取消计时器clearInterval()
clearInterval() 方法可取消由 setInterval() 设置的交互时间。

语法：

clearInterval(id_of_setInterval)
参数说明:
id_of_setInterval：由 setInterval() 返回的 ID 值。

 <input type="button" value="Stop" onclick="clearInterval(i)"  />
 -----------------------------------------------------
 计时器setTimeout()
setTimeout()计时器，在载入后延迟指定时间后,去执行一次表达式,仅执行一次。

语法:

setTimeout(代码,延迟时间);
参数说明：

1. 要调用的函数或要执行的代码串。
2. 延时时间：在执行代码前需等待的时间，以毫秒为单位（1s=1000ms)。

当我们打开网页3秒后，在弹出一个提示框，代码如下:

<!DOCTYPE HTML>
<html>
<head>
<script type="text/javascript">
  setTimeout("alert('Hello!')", 3000 );
</script>
</head>
<body>
</body>
</html>
当按钮start被点击时，setTimeout()调用函数，在5秒后弹出一个提示框。

<!DOCTYPE HTML>
<html>
<head>
<script type="text/javascript">
function tinfo(){
  var t=setTimeout("alert('Hello!')",5000);
 }
</script>
</head>
<body>
<form>
  <input type="button" value="start" onClick="tinfo()">
</form>
</body>
</html>
要创建一个运行于无穷循环中的计数器，我们需要编写一个函数来调用其自身。在下面的代码，当按钮被点击后，输入域便从0开始计数。

<!DOCTYPE HTML>
<html>
<head>
<script type="text/javascript">
var num=0;
function numCount(){
 document.getElementById('txt').value=num;
 num=num+1;
 setTimeout("numCount()",1000);
 }
</script>
</head>
<body>
<form>
<input type="text" id="txt" />
<input type="button" value="Start" onClick="numCount()" />
</form>
</body>
</html>
------------------------------------------------------
取消计时器clearTimeout()
setTimeout()和clearTimeout()一起使用，停止计时器。

语法:

clearTimeout(id_of_setTimeout)
参数说明:
id_of_setTimeout：由 setTimeout() 返回的 ID 值。该值标识要取消的延迟执行代码块。

下面的例子和上节的无穷循环的例子相似。唯一不同是，现在我们添加了一个 "Stop" 按钮来停止这个计数器：

<!DOCTYPE HTML>
<html>
<head>
<script type="text/javascript">
  var num=0,i;
  function timedCount(){
    document.getElementById('txt').value=num;
    num=num+1;
    i=setTimeout(timedCount,1000);
  }
    setTimeout(timedCount,1000);
  function stopCount(){
    clearTimeout(i);
  }
</script>
</head>
<body>
  <form>
    <input type="text" id="txt">
    <input type="button" value="Stop" onClick="stopCount()">
  </form>
</body>
</html>
--------------------------------------------------------------------------
History 对象
history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。

注意:从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。

语法：

window.history.[属性|方法]
注意：window可以省略。

History 对象属性
length		返回浏览器历史列表中的URL数量

History
back()		加载history列表中的前一个URL
forward()	加载history列表中的下一个URL
go()		加载history列表中的某个具体的页面

使用length属性，当前窗口的浏览历史总长度，代码如下：

<script type="text/javascript">
  var HL = window.history.length;
  document.write(HL);
</script>

--------------------------------------------------------
返回前一个浏览的页面
back()方法，加载 history 列表中的前一个 URL。

语法：

window.history.back();
比如，返回前一个浏览的页面，代码如下：

window.history.back();
注意：等同于点击浏览器的倒退按钮。

back()相当于go(-1),代码如下:

window.history.go(-1);
------------------------------------------------------
返回下一个浏览的页面
forward()方法，加载 history 列表中的下一个 URL。

如果倒退之后，再想回到倒退之前浏览的页面，则可以使用forward()方法,代码如下:

window.history.forward();
注意：等价点击前进按钮。

forward()相当于go(1),代码如下:

window.history.go(1);
---------------------------------------------------
返回浏览历史中的其他页面
go()方法，根据当前所处的页面，加载 history 列表中的某个具体的页面。

语法：

window.history.go(number);
参数：
1			前一个，go（1）等价forward（）
0			当前页面
-1			后一个，go（-1）等价back（）
其他数值	要访问的URL在history的url列表中的相对位置

浏览器中，返回当前页面之前浏览过的第二个历史页面，代码如下：

window.history.go(-2);
注意：和在浏览器中单击两次后退按钮操作一样。

同理，返回当前页面之后浏览过的第三个历史页面，代码如下：

window.history.go(3);
---------------------------------------------------------------------

Location对象
location用于获取或设置窗体的URL，并且可以用于解析URL。

语法:

location.[属性|方法]

location 对象属性：

属性			描述
bash			设置或返回从#开始的url
host			设置或返回主机名和当前url的端口号
hostname		设置或返回当前url的主机名
href			设置或返回完整的url
pathname		设置或返回当前url的路径部分
port			设置或返回当前url的端口号
protocol		设置或返回当前url的协议
search			设置或返回从？开始的url

location 对象方法：

属性			描述
assign()		加载新的文档
reload()		重新加载当前文档
replace()		用新的文档替换当前文档

----------------------------------------------------------

Navigator对象
Navigator 对象包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。

对象属性:
属性			描述
appCodeName		浏览器代码名的字符串表示
appName			返回浏览器的名称
appVersion		返回浏览器的平台和版本信息
platform		返回运行浏览器的操作系统平台
userAgent		返回由客户机发送服务器的user-agent头部的值

查看浏览器的名称和版本，代码如下:

<script type="text/javascript">
   var browser=navigator.appName;
   var b_version=navigator.appVersion;
   document.write("Browser name"+browser);
   document.write("<br>");
   document.write("Browser version"+b_version);
</script>
---------------------------------------------------
userAgent
返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)

语法

navigator.userAgent
几种浏览的user_agent.，像360的兼容模式用的是IE、极速模式用的是chrom的内核。

使用userAgent判断使用的是什么浏览器(假设使用的是IE8浏览器),代码如下:

function validB(){ 
  var u_agent = navigator.userAgent; 
  var B_name="Failed to identify the browser"; 
  if(u_agent.indexOf("Firefox")>-1){ 
      B_name="Firefox"; 
  }else if(u_agent.indexOf("Chrome")>-1){ 
      B_name="Chrome"; 
  }else if(u_agent.indexOf("MSIE")>-1&&u_agent.indexOf("Trident")>-1){ 
      B_name="IE(8-10)";  
  }
    document.write("B_name:"+B_name+"<br>");
    document.write("u_agent:"+u_agent+"<br>"); 
} 
---------------------------------------------------------------------

screen对象
screen对象用于获取用户的屏幕信息。

语法：

window.screen.属性
对象属性:
availHeight		窗口可以使用的屏幕高度，单位像素
availWidth		窗口可以使用的屏幕宽度，单位像素
colorDepth		用户浏览器表示的颜色位数，通常为32（每像素的位数）
pixelDepth		用户浏览器表示的颜色位数，通常为32（每像素的位数）（ie不支持）
height			屏幕的高度，单位像素
width 			屏幕的宽度，单位像素
--------------------------------------------
屏幕分辨率的高和宽
window.screen 对象包含有关用户屏幕的信息。
1. screen.height 返回屏幕分辨率的高
2. screen.width 返回屏幕分辨率的宽
注意:
1.单位以像素计。
2. window.screen 对象在编写时可以不使用 window 这个前缀。
我们来获取屏幕的高和宽，代码如下:

<script type="text/javascript">
  document.write( "屏幕宽度："+screen.width+"px<br />" );
  document.write( "屏幕高度："+screen.height+"px<br />" );
</script>
--------------------------------------------
屏幕可用高和宽度
1. screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如任务栏。

2. screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如任务栏。

注意:

不同系统的任务栏默认高度不一样，及任务栏的位置可在屏幕上下左右任何位置，所以有可能可用宽度和高度不一样。

我们来获取屏幕的可用高和宽度，代码如下：

<script type="text/javascript">
document.write("可用宽度：" + screen.availWidth);
document.write("可用高度：" + screen.availHeight);
</script>
注意:根据屏幕的不同显示值不同。

-----------------------------------------------------------------------------

编程练习
制作一个跳转提示页面：

要求：

1. 如果打开该页面后，如果不做任何操作则5秒后自动跳转到一个新的地址，如慕课网主页。

2. 如果点击“返回”按钮则返回前一个页面。

注意: 在窗口中运行该程序时，该窗口一定要有历史浏览记录，否则"返回"无效果。

<!DOCTYPE html>
<html>
 <head>
  <title>浏览器对象</title>  
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>   
 </head>
 <body>
  <!--先编写好网页布局-->
  <h4>操作成功</h4>

  <a id="txt">5</a><a>秒后回到主页 </a> <a href="" onclick="myback()">返回</a>
 
  <script type="text/javascript">  
 
   //获取显示秒数的元素，通过定时器来更改秒数。
    var i = 5;
    function countNum(){
        var p = document.getElementById("txt");
        p.innerHTML = i;
        i--;
        if(i<0) {
        	clearInterval(inter);
        	myload();
        }
    }
    var inter = setInterval("countNum()",1000);
   //通过window的location和history对象来控制网页的跳转。
   function myload(){
   	  location.assign("https://www.imooc.com")
   }
   
   function myback(){
   		window.history.back();
   }
 </script> 
</body>
</html>

-------------------------------------------------------------------------

认识DOM
文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。

HTML文档可以说由节点构成的集合，DOM节点有:

1. 元素节点：上图中<html>、<body>、<p>等都是元素节点，即标签。

2. 文本节点:向用户展示的内容，如<li>...</li>中的JavaScript、DOM、CSS等文本。

3. 属性节点:元素属性，如<a>标签的链接属性href="http://www.imooc.com"。
------------------------------------------------
getElementsByName()方法
返回带有指定名称的节点对象的集合。

语法：

document.getElementsByName(name)
与getElementById() 方法不同的是，通过元素的 name 属性查询元素，而不是通过 id 属性。

注意:

1. 因为文档中的 name 属性可能不唯一，所有 getElementsByName() 方法返回的是元素的数组，而不是一个元素。

2. 和数组类似也有length属性，可以和访问数组一样的方法来访问，从0开始。
--------------------------------------------------
getElementsByTagName()方法
返回带有指定标签名的节点对象的集合。返回元素的顺序是它们在文档中的顺序。

语法:

document.getElementsByTagName(Tagname)
说明:

1. Tagname是标签的名称，如p、a、img等标签名。

2. 和数组类似也有length属性，可以和访问数组一样的方法来访问，所以从0开始。
-----------------------------------------------------

区别getElementByID,getElementsByName,getElementsByTagName
以人来举例说明，人有能标识身份的身份证，有姓名，有类别(大人、小孩、老人)等。

1. ID 是一个人的身份证号码，是唯一的。所以通过getElementById获取的是指定的一个人。

2. Name 是他的名字，可以重复。所以通过getElementsByName获取名字相同的人集合。

3. TagName可看似某类，getElementsByTagName获取相同类的人集合。如获取小孩这类人，getElementsByTagName("小孩")。

把上面的例子转换到HTML中，如下:

<input type="checkbox" name="hobby" id="hobby1">  音乐
input标签就像人的类别。

name属性就像人的姓名。

id属性就像人的身份证。

注意：方法区分大小写

通过下面的例子(6个name="hobby"的复选项，两个按钮)来区分三种方法的不同:

  <input type="checkbox" name="hobby" id="hobby1">  音乐
  <input type="checkbox" name="hobby" id="hobby2">  登山
  <input type="checkbox" name="hobby" id="hobby3">  游泳
  <input type="checkbox" name="hobby" id="hobby4">  阅读
  <input type="checkbox" name="hobby" id="hobby5">  打球
  <input type="checkbox" name="hobby" id="hobby6">  跑步 
  <input type="button" value = "全选" id="button1">
  <input type="button" value = "全不选" id="button1">
1. document.getElementsByTagName("input")，结果为获取所有标签为input的元素，共8个。

2. document.getElementsByName("hobby")，结果为获取属性name="hobby"的元素，共6个。

3. document.getElementById("hobby6")，结果为获取属性id="hobby6"的元素，只有一个，"跑步"这个复选项。

----------------------------------------------------------------------------------

getAttribute()方法
通过元素节点的属性名称获取属性的值。

语法：

elementNode.getAttribute(name)
说明:

1. elementNode：使用getElementById()、getElementsByTagName()等方法，获取到的元素节点。

2. name：要想查询的元素节点的属性名字
------------------------------------------------
setAttribute()方法
setAttribute() 方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。

语法：

elementNode.setAttribute(name,value)
说明：

1.name: 要设置的属性名。

2.value: 要设置的属性值。

注意：

1.把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。

2.类似于getAttribute()方法，setAttribute()方法只能通过元素节点对象调用的函数。

---------------------------------------------------------------------------------

节点属性
在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：

1. nodeName : 节点的名称

2. nodeValue ：节点的值

3. nodeType ：节点的类型

一、nodeName 属性: 节点的名称，是只读的。

1. 元素节点的 nodeName 与标签名相同
2. 属性节点的 nodeName 是属性的名称
3. 文本节点的 nodeName 永远是 #text
4. 文档节点的 nodeName 永远是 #document

二、nodeValue 属性：节点的值

1. 元素节点的 nodeValue 是 undefined 或 null
2. 文本节点的 nodeValue 是文本自身
3. 属性节点的 nodeValue 是属性的值

三、nodeType 属性: 节点的类型，是只读的。以下常用的几种结点类型:

元素类型    节点类型
  元素          1
  属性          2
  文本          3
  注释          8
  文档          9

----------------------------------------------------------------------------

访问子节点childNodes
访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。

语法：

elementNode.childNodes
注意：

如果选定的节点没有子节点，则该属性返回不包含节点的 NodeList。

注意:

1. IE全系列、firefox、chrome、opera、safari兼容问题

2.节点之间的空白符，在firefox、chrome、opera、safari浏览器是文本节点，所以IE是3，其它浏览器是7，
----------------------------------------------------
访问子节点的第一和最后项
一、firstChild 属性返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。

语法：

node.firstChild
说明：与elementNode.childNodes[0]是同样的效果。 

二、 lastChild 属性返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。

语法：

node.lastChild
说明：与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。 

注意: 上一节中，我们知道Internet Explorer 会忽略节点之间生成的空白文本节点，而其它浏览器不会。我们可以通过检测节点类型，过滤子节点。 (以后章节讲解)
----------------------------------------------------
访问父节点parentNode
获取指定节点的父节点

语法：

elementNode.parentNode
注意:父节点只能有一个。

看看下面的例子,获取 P 节点的父节点，代码如下:

<div id="text">
  <p id="con"> parentNode 获取指点节点的父节点</p>
</div> 
<script type="text/javascript">
  var mynode= document.getElementById("con");
  document.write(mynode.parentNode.nodeName);
</script>
运行结果:

parentNode 获取指点节点的父节点
DIV
访问祖节点:

elementNode.parentNode.parentNode
看看下面的代码:

<div id="text">  
  <p>
    parentNode      
    <span id="con"> 获取指点节点的父节点</span>
  </p>
</div> 
<script type="text/javascript">
  var mynode= document.getElementById("con");
  document.write(mynode.parentNode.parentNode.nodeName);
</script>
运行结果:

parentNode获取指点节点的父节点
DIV
注意: 浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。

-----------------------------------------------------------------

访问兄弟节点
1. nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）。

语法：

nodeObject.nextSibling
说明：如果无此节点，则该属性返回 null。

2. previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）。

语法：

nodeObject.previousSibling  
说明：如果无此节点，则该属性返回 null。

注意: 两个属性获取的是节点。Internet Explorer 会忽略节点间生成的空白文本节点（例如，换行符号），而其它浏览器不会忽略。

解决问题方法:

判断节点nodeType是否为1, 如是为元素节点，跳过。

----------------------------------------------------------------

插入节点appendChild()
在指定节点的最后一个子节点列表之后添加一个新的子节点。

语法:

appendChild(newnode)
参数:

newnode：指定追加的节点。

-----------------------------------------------------------------

插入节点insertBefore()
insertBefore() 方法可在已有的子节点前插入一个新的子节点。

语法:

insertBefore(newnode,node);

参数:

newnode: 要插入的新节点。

node: 指定此节点前插入节点。

注意: otest.insertBefore(newnode,node); 也可以改为:  otest.insertBefore(newnode,otest.childNodes[0]); 

------------------------------------------------------------

删除节点removeChild()
removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。

语法:

nodeObject.removeChild(node)
参数:

node ：必需，指定需要删除的节点。

注意: 把删除的子节点赋值给x，这个子节点不在DOM树中，但是还存在内存中，可通过 x 操作。
如果要完全删除对象，给 x 赋 null 值，

---------------------------------------------------


任务
大家先思考和分析实现思路，然后在动手实现

一、HTML页面布局

提示:
选项卡标题使用ul..li
选项卡内容使用div
二、CSS样式制作

提示:
整个选项卡的样式设置
选项卡标题的样式设置
选项卡内容的样式设置
一开始只显示一个选项卡内容，其它选项卡内容隐藏。
三、JS实现选项卡切换

提示:
获取选项卡标题和选项卡内容
选项卡内容多个，需要循环遍历来操作，得知哪个选项卡和哪个选项内容匹配
通过改变DOM的css类名称,当前点击的选项卡显示，其它隐藏。


<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>实践题 - 选项卡</title>
    <style type="text/css">/* CSS样式制作 */
.body {
	width: 100%;
	height: 100%;
	margin: 0 auto;
}
#list {
	position:absolute;
	height: 20px;
}
#list ul {
	z-index: 5;
	list-style: none;
	width: 100%;
}
#list ul li {
	float: left;
	margin-right: 20px;
	border: 1px solid;
	border-color: #646464;
	border-bottom: none;
	padding-left: 8px;
	padding-right: 8px;
}
#textBox {
	margin-left: 25px;
	position:absolute;
	margin-top: 38px;
	width: 400px;
	z-index: -1;
}
.txtborder{
	border: 1px solid;
	border-color: #1651AB;
	padding-left: 15px;
	border-top: 2px solid;
	border-top-color: #CC0000;
}
    </style>
    <script type="text/javascript">
    	var hide1;
    	var hide2;
    	// JS实现选项卡切换
    	function f(visi){
        	var lis = document.getElementsByTagName("li");
        	var txts = document.getElementsByClassName("txtborder")
        	for(var i=0;i<3;i++){
        		if(i==visi) {
        			txts[i].style.display="block";
        			lis[i].style.borderTop="2px solid";
        			lis[i].style.borderTopColor="#CC0000";
        			lis[i].style.borderBottom="2px solid";
        			lis[i].style.borderBottomColor="white";
        		}
        		else{
        			txts[i].style.display="none";
        			lis[i].style.borderBottom="none";
        			lis[i].style.borderTop="1px solid";
        			lis[i].style.borderColor="#646464";
        		}
        	}
    	}
    </script>
</head>
<body onload="f(0)">
<!-- HTML页面布局 -->
	<div>
		<div id="list">
		    <ul>
		        <a href="#"><li onclick="f(0)">房产</li></a>
		        <a href="#"><li onclick="f(1)">家居</li></a>
		        <a href="#"><li onclick="f(2)">二手房</li></a>
		    </ul>
	    </div>
		<div id="textBox">
			<div class="txtborder" id="txt0">
				<p>275万购昌平邻铁三居 总价20万买一居</p>
		    	<p>200万内购五环三居 140万安家东三环</p>
		    	<p>北京首现零首付楼盘 53万购东5环50平</p>
		    	<p>京楼盘直降5000 中信府 公园楼王现房</p>
			</div>
			<div class="txtborder" id="txt1">
				<p>40平出租屋大改造 美少女的混搭小窝</p>
     			<p>经典清新简欧爱家 90平老房焕发新生</p>
     			<p>新中式的酷色温情 66平撞色活泼家居</p>
    			<p>瓷砖就像选好老婆 卫生间烟道的设计</p>
			</div>
			<div class="txtborder" id="txt2">
				<p>通州豪华3居260万 二环稀缺2居250w甩</p>
     			<p>西3环通透2居290万 130万2居限量抢购</p>
     			<p>黄城根小学学区仅260万 121平70万抛!</p>
     			<p>独家别墅280万 苏州桥2居优惠价248万</p>
			</div>
		</div>
 	</div>
</body>
</html>











